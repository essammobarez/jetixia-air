import httpStatus from "http-status";
import AppError from "../../errors/AppError";
import { SystemUser } from "./systemUser.model";
import { TSystemUser, TCreateSystemUser } from "./systemUser.interface";
import { createToken } from "../auth/auth.utils";
import config from "../../config";
import * as bcrypt from "bcrypt";

const createSystemUser = async (payload: TCreateSystemUser) => {
  // Check if system user already exists with same email
  const existingUser = await SystemUser.findOne({ email: payload.email });

  if (existingUser) {
    throw new AppError(
      httpStatus.CONFLICT,
      "System user with this email already exists"
    );
  }

  // userId will be auto-generated by the schema default
  // role will default to "STAFF" if not provided
  const result = await SystemUser.create(payload);
  return result;
};

const getAllSystemUsers = async () => {
  const result = await SystemUser.find({}).select("-password");
  return result;
};

const getSystemUserById = async (id: string) => {
  const result = await SystemUser.findById(id).select("-password");

  if (!result) {
    throw new AppError(httpStatus.NOT_FOUND, "System user not found");
  }

  return result;
};

const updateSystemUser = async (id: string, payload: Partial<TSystemUser>) => {
  // Check if system user exists
  const existingUser = await SystemUser.findById(id);
  if (!existingUser) {
    throw new AppError(httpStatus.NOT_FOUND, "System user not found");
  }

  // If updating email, check for conflicts
  if (payload.email) {
    const conflictUser = await SystemUser.findOne({
      email: payload.email,
      _id: { $ne: id }, // Exclude current user
    });

    if (conflictUser) {
      throw new AppError(
        httpStatus.CONFLICT,
        "System user with this email already exists"
      );
    }
  }

  // Hash password if it's being updated
  if (payload.password) {
    payload.password = await bcrypt.hash(payload.password, 12);
  }

  const result = await SystemUser.findByIdAndUpdate(id, payload, {
    new: true,
    runValidators: true,
  }).select("-password");

  return result;
};

const deleteSystemUser = async (id: string) => {
  const existingUser = await SystemUser.findById(id);
  if (!existingUser) {
    throw new AppError(httpStatus.NOT_FOUND, "System user not found");
  }

  const result = await SystemUser.findByIdAndDelete(id);
  return result;
};

const loginSystemUser = async (payload: {
  userId: string;
  password: string;
}) => {
  const { userId, password } = payload;

  const systemUser = await SystemUser.isSystemUserExist(userId);

  if (!systemUser) {
    throw new AppError(httpStatus.NOT_FOUND, "System user does not exist");
  }

  if (!systemUser.isActive) {
    throw new AppError(
      httpStatus.FORBIDDEN,
      "System user account is deactivated"
    );
  }

  const isCorrectPassword = await SystemUser.isPasswordMatched(
    password,
    systemUser.password
  );

  if (!isCorrectPassword) {
    throw new AppError(httpStatus.UNAUTHORIZED, "Password is incorrect");
  }

  // Update last login
  await SystemUser.findByIdAndUpdate(systemUser._id, {
    lastLogin: new Date(),
  });

  const jwtPayload = {
    userId: systemUser._id,
    adminUserId: systemUser.userId,
    email: systemUser.email,
    role: systemUser.role,
  };

  const accessToken = createToken(
    jwtPayload,
    config.jwt_access_secret as string,
    config.jwt_access_expires_in as string
  );

  const refreshToken = createToken(
    jwtPayload,
    config.jwt_refresh_secret as string,
    config.jwt_refresh_expires_in as string
  );

  return {
    systemUser: {
      _id: systemUser._id,
      userId: systemUser.userId,
      email: systemUser.email,
      role: systemUser.role,
      isActive: systemUser.isActive,
      lastLogin: systemUser.lastLogin,
      createdAt: systemUser.createdAt,
      updatedAt: systemUser.updatedAt,
    },
    accessToken,
    refreshToken,
  };
};

const changePassword = async (
  id: string,
  payload: { oldPassword: string; newPassword: string }
) => {
  const { oldPassword, newPassword } = payload;

  const systemUser = await SystemUser.findById(id).select("+password");
  if (!systemUser) {
    throw new AppError(httpStatus.NOT_FOUND, "System user not found");
  }

  const isCorrectPassword = await SystemUser.isPasswordMatched(
    oldPassword,
    systemUser.password
  );

  if (!isCorrectPassword) {
    throw new AppError(httpStatus.UNAUTHORIZED, "Old password is incorrect");
  }

  const hashedPassword = await bcrypt.hash(newPassword, 12);
  const result = await SystemUser.findByIdAndUpdate(
    id,
    { password: hashedPassword },
    { new: true, runValidators: true }
  ).select("-password");

  return result;
};

const toggleSystemUserStatus = async (id: string) => {
  const systemUser = await SystemUser.findById(id);
  if (!systemUser) {
    throw new AppError(httpStatus.NOT_FOUND, "System user not found");
  }

  const result = await SystemUser.findByIdAndUpdate(
    id,
    { isActive: !systemUser.isActive },
    { new: true, runValidators: true }
  ).select("-password");

  return result;
};

export const SystemUserServices = {
  createSystemUser,
  getAllSystemUsers,
  getSystemUserById,
  updateSystemUser,
  deleteSystemUser,
  loginSystemUser,
  changePassword,
  toggleSystemUserStatus,
};
